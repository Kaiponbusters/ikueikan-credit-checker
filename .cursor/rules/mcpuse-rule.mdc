---
description: 
globs: 
alwaysApply: true
---
# Cursor MCP利用ガイド - GitHub MCP & Playwright MCP

## 概要
このドキュメントは、Cursor環境でGitHub MCPとPlaywright MCPを効果的に活用するためのルールとベストプラクティスを定義します。

## 🚀 GitHub MCP 利用ルール

### 基本原則
- **リポジトリ操作の自動化**: Issue作成、PR管理、コード検索を効率的に実行
- **認証の確保**: GitHub APIへのアクセス権限が適切に設定されていることを確認
- **レート制限の考慮**: API呼び出し回数を意識した効率的な使用

### 推奨用途
1. **Issue管理**
   - バグ報告の自動作成
   - 機能追加要求の管理
   - 進捗追跡とラベル管理

2. **Pull Request操作**
   - PR作成とレビュー依頼
   - マージ操作の自動化
   - ブランチ管理

3. **コード検索と分析**
   - プロジェクト内のコード検索
   - 依存関係の調査
   - パターン分析

### 制限事項
- 重要な操作（マージ、削除）は必ず人間の確認を得る
- プライベートリポジトリへのアクセスは権限を事前確認
- 大量の自動操作は控える

---

## 🎭 Playwright MCP 利用ルール

### 基本原則（最新ベストプラクティス準拠）

#### 1. ユーザー視点のテスト
- **ユーザーの可視的な動作のテスト**: 実装詳細ではなく、エンドユーザーが実際に見る・操作するものをテストする
- **アクセシビリティ属性の活用**: `data-testid`、`aria-label`、`role`を積極的に使用
- **セマンティックなロケーター**: getByRole、getByText、getByLabelを優先使用

#### 2. テストの独立性
```javascript
// ✅ 推奨：各テストは完全に独立
test.beforeEach(async ({ page }) => {
  await page.goto('/');
  // 必要な初期化処理
});
```

#### 3. 適切な使用場面
**Playwright MCPを使用すべき場面**:
- アクセシビリティ属性が適切に設定されたページ
- 単純なUIインタラクション（フォーム操作、ボタンクリック）
- 基本的なナビゲーションテスト
- モノリポジトリ環境での開発

**避けるべき場面**:
- カスタムUIでアクセシビリティ属性がない場合
- 複雑なロジックや複数APIとの連携が必要
- 内部値の検証が必要（UIの視覚的状態以外）

### 実装ガイドライン

#### 1. ロケーター戦略
```javascript
// ✅ 推奨：セマンティックロケーター
await page.getByRole('button', { name: '送信' }).click();
await page.getByLabel('ユーザー名').fill('test@example.com');
await page.getByText('ログイン成功').isVisible();

// ⚠️ 必要に応じて：data-testid
await page.getByTestId('submit-button').click();

// ❌ 避ける：CSS セレクタ
await page.locator('.btn-primary').click(); // 非推奨
```

#### 2. アサーション
```javascript
// ✅ Web-first アサーション（自動リトライ）
await expect(page.getByText('成功')).toBeVisible();
await expect(page.getByRole('alert')).toContainText('エラー');

// ✅ Soft アサーション（複数チェック）
await expect.soft(page.getByTestId('status')).toHaveText('Success');
await page.getByRole('link', { name: 'next page' }).click();
```

#### 3. 待機戦略
```javascript
// ✅ 自動待機を活用
await page.getByRole('button').click(); // 自動的にactionable状態を待機

// ✅ 必要時のみ明示的待機
await page.waitForLoadState('networkidle');
```

### プロジェクト固有の推奨事項

#### 1. 育英館大学単位管理システムでの活用
- **科目検索機能のテスト**: 検索フィルタの動作確認
- **単位計算の検証**: 履修登録後の単位数表示確認
- **レスポンシブデザインのテスト**: モバイル・デスクトップ表示の確認

#### 2. data-testid の自動追加ルール
```typescript
// コンポーネント作成時にdata-testidを自動追加
<button 
  data-testid="course-search-submit"
  onClick={handleSubmit}
>
  検索実行
</button>
```

#### 3. モノリポジトリでの効率化
- フロントエンドとテストを同一リポジトリで管理
- コンポーネント修正時に対応するテストも同時更新
- Cursorのスクリーンショット機能でUIとテストを連携

### パフォーマンス最適化

#### 1. 並列実行
```javascript
// ✅ ファイル内並列実行（独立テスト）
test.describe.configure({ mode: 'parallel' });

// ✅ シャーディング（CI環境）
npx playwright test --shard=1/3
```

#### 2. ブラウザ最適化
```javascript
// CI環境：必要なブラウザのみインストール
npx playwright install chromium --with-deps
```

#### 3. テストの独立性保証
```javascript
// ✅ 認証状態の再利用
test.use({ storageState: 'auth.json' });
```

### デバッグとトラブルシューティング

#### 1. トレース機能の活用
```javascript
// 失敗時のトレース保存
test.use({ trace: 'retain-on-failure' });
```

#### 2. スクリーンショット
```javascript
// 重要なステップでスクリーンショット
await page.screenshot({ path: 'example.png' });
```

#### 3. 開発者ツール連携
```javascript
// デバッグ時のページ停止
await page.pause();
```

---

## 🔗 統合利用パターン

### GitHub MCP + Playwright MCP の連携
1. **Issue駆動テスト開発**
   - GitHub IssueからPlaywrightテストケース生成
   - テスト結果をIssueコメントで報告

2. **PR自動テスト**
   - PR作成時にPlaywrightテスト自動実行
   - テスト結果をPR statusで報告

3. **バグ報告の自動化**
   - Playwrightテスト失敗時にGitHub Issue自動作成
   - スクリーンショットと実行ログを添付

### CI/CD 統合
```yaml
# .github/workflows/e2e-tests.yml
name: E2E Tests
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright
        run: npx playwright install chromium --with-deps
      - name: Run Playwright tests
        run: npx playwright test
```

---

## 📋 チェックリスト

### GitHub MCP 使用前確認
- [ ] GitHub認証設定完了
- [ ] リポジトリアクセス権限確認
- [ ] API制限レート確認

### Playwright MCP 使用前確認
- [ ] UIにアクセシビリティ属性設定済み
- [ ] テストシナリオが単純かつ独立
- [ ] ブラウザ環境設定完了
- [ ] 必要なdata-testid追加済み

### コード品質確認
- [ ] セマンティックロケーター使用
- [ ] Web-firstアサーション実装
- [ ] テスト独立性保証
- [ ] 適切なエラーハンドリング

---

## 📚 参考資料

- [Playwright Best Practices](mdc:https:/playwright.dev/docs/best-practices) - 公式ベストプラクティス
- [Practical use of Cursor and MCP Playwright in test automation](mdc:https:/medium.com/@denisskvrtsv/practical-use-of-cursor-and-mcp-playwright-in-test-automation-5443d181dc2f) - 実用的な活用方法
- [GitHub MCP Documentation](mdc:https:/github.com/microsoft/mcp) - MCP公式ドキュメント

---
