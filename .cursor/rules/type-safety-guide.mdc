---
description: 
globs: 
alwaysApply: true
---
# 型安全性ガイド - 育英館大学単位管理システム

## 🛡️ 型安全性の重要性
このガイドは2024年12月27日に発生したRuntime Errorの修正経験を基に作成されました。型の不整合によるランタイムエラーを防ぐための具体的な指針を提供します。

## 📋 必須チェックリスト

### JSONデータとTypeScript型の整合性
- [ ] [courses.json](mdc:app/lib/data/courses.json)の構造と[types.ts](mdc:app/lib/types.ts)の`Course`型が一致している
- [ ] [requirements.json](mdc:app/lib/data/requirements.json)の構造と要件チェッカーの期待する型が一致している
- [ ] オプショナルプロパティ（`?:`）が実際のデータ構造を正確に反映している
- [ ] 型アサーション（`as Type[]`）がJSONインポート時に適切に使用されている

### 関数レベルでの型安全性
- [ ] すべての関数パラメータに型注釈が設定されている
- [ ] すべての関数の戻り値型が明示されている
- [ ] オプショナルパラメータの処理でnullチェックが実装されている
- [ ] 配列操作（map, filter等）前に配列の存在確認をしている

## 🚨 よくある型エラーパターンと対処法

### 1. JSONデータ参照エラー
```typescript
// ❌ 危険：JSONの構造を仮定したアクセス
const requirements = requirementsData.graduationRequirements; // undefined になる可能性

// ✅ 安全：実際のJSON構造に基づくアクセス
const requirements = requirementsData.graduationRequirement;
```

### 2. オプショナルプロパティの不適切な処理
```typescript
// ❌ 危険：オプショナルプロパティの直接使用
function processCourse(course: Course) {
  return course.department.toLowerCase(); // department が undefined の場合エラー
}

// ✅ 安全：nullチェック付きの処理
function processCourse(course: Course) {
  return course.department?.toLowerCase() || 'unknown';
}
```

### 3. 配列操作時の未定義チェック不足
```typescript
// ❌ 危険：配列の存在を仮定した操作
requirements.map(req => processRequirement(req)); // requirements が undefined の場合エラー

// ✅ 安全：存在確認付きの操作
requirements?.map(req => processRequirement(req)) || [];
```

## 🔧 実装パターン

### JSONデータの安全な読み込み
```typescript
// ファイル：page.tsx
import coursesData from './lib/data/courses.json';

// 型アサーションで型安全性を確保
const [courses] = useState<Course[]>(coursesData.courses as Course[]);
```

### 型ガードの活用
```typescript
// 型ガード関数の例
function isCourse(obj: any): obj is Course {
  return obj && 
         typeof obj.id === 'string' && 
         typeof obj.name === 'string' &&
         typeof obj.credits === 'number';
}

// 使用例
if (isCourse(data)) {
  // data は Course 型として安全に使用可能
  console.log(data.credits);
}
```

### 安全な配列処理
```typescript
// 安全な配列操作のパターン
function processUserCourses(courses: Course[], userCourses: UserCourse[]): ProcessedCourse[] {
  if (!courses || !userCourses) {
    return [];
  }
  
  return userCourses
    .map(uc => {
      const course = courses.find(c => c.id === uc.courseId);
      if (!course) return null; // 見つからない場合の安全な処理
      
      return {
        ...course,
        status: uc.status
      };
    })
    .filter((course): course is ProcessedCourse => course !== null); // 型ガードでnullを除外
}
```

## 📝 開発時のベストプラクティス

### 1. 定期的な型チェック
```bash
# TypeScriptコンパイルを定期的に実行
npm run build

# 型エラーのみをチェック
npx tsc --noEmit
```

### 2. 段階的な型強化
```typescript
// Phase 1: 基本的な型を設定
interface BasicCourse {
  id: string;
  name: string;
  credits: number;
}

// Phase 2: オプショナルプロパティを追加
interface Course extends BasicCourse {
  department?: string;
  notes?: string;
}

// Phase 3: より詳細な型制約を追加
interface StrictCourse extends Course {
  id: `${string}-${string}-${number}`; // 科目コードのパターン
  credits: 1 | 2 | 4 | 6; // 許可される単位数のみ
}
```

### 3. エラーハンドリングの強化
```typescript
// 型安全なエラーハンドリング
function calculateCredits(courses: Course[], userCourses: UserCourse[]): number {
  try {
    if (!Array.isArray(courses) || !Array.isArray(userCourses)) {
      throw new Error('Invalid input: expected arrays');
    }
    
    return userCourses.reduce((total, uc) => {
      const course = courses.find(c => c.id === uc.courseId);
      if (!course) {
        console.warn(`Course not found: ${uc.courseId}`);
        return total;
      }
      
      return total + (course.credits || 0);
    }, 0);
  } catch (error) {
    console.error('Error calculating credits:', error);
    return 0; // 安全なデフォルト値
  }
}
```

## 🧪 テスト戦略

### 型安全性のテスト例
```typescript
// 型の整合性をテストする例
describe('Type Safety', () => {
  test('courses.json matches Course type', () => {
    const courses = coursesData.courses as Course[];
    
    courses.forEach(course => {
      expect(typeof course.id).toBe('string');
      expect(typeof course.name).toBe('string');
      expect(typeof course.credits).toBe('number');
      
      // オプショナルプロパティのテスト
      if (course.department) {
        expect(typeof course.department).toBe('string');
      }
    });
  });
});
```

## 📚 参考リンク
- [TypeScript Handbook - Type Guards](mdc:https:/www.typescriptlang.org/docs/handbook/2/narrowing.html)
- [TypeScript Deep Dive - Type Assertion](mdc:https:/basarat.gitbook.io/typescript/type-system/type-assertion)
- [React TypeScript Cheatsheet](mdc:https:/react-typescript-cheatsheet.netlify.app)

---
**最終更新**: 2024年12月27日  
**バージョン**: 1.0.0 (初回作成)
