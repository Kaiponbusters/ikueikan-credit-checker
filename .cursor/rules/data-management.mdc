---
description:
globs:
alwaysApply: false
---
# データ管理・型安全性ルール

## 型定義管理

### メイン型定義の場所
すべての型定義は[types.ts](mdc:app/lib/types.ts)に集約して管理：

```typescript
// 主要な型定義
- Course: 科目情報
- UserCourse: ユーザーの履修状況  
- CreditSummary: 単位集計結果
- GraduationRequirement: 卒業要件定義
- SearchFilter: 検索フィルタ（系別フィルタ含む）
```

### 型安全性の重要ポイント
- JSONデータと型定義の整合性を必ず保つ
- オプショナルプロパティ（`?:`）は実際のデータ構造に基づいて決定
- 型アサーション（`as Type[]`）はJSONインポート時に適切に使用

## データファイル管理

### 科目データ
[courses.json](mdc:app/lib/data/courses.json)
- **重要**: スクレイピングで取得したデータのため内容は変更禁止
- カテゴリ形式：「系名(英語名)」（例：「情報・メディア系(Information and Media)」）
- 系名抽出には`extractSystemFromCategory()`関数を使用

### 卒業要件データ  
[requirements.json](mdc:app/lib/data/requirements.json)
- プロパティ名：`graduationRequirement`（単数形）
- **注意**: `graduationRequirements`（複数形）ではない

### ユーザーデータ
- ローカルストレージで永続化
- [storage.ts](mdc:app/lib/storage.ts)で管理
- データバージョン管理を実装

## データ処理関数の命名規則

### 計算関数の命名パターン
```typescript
// パターン: calculate[Target]By[Axis]()
calculateCreditsBySystem()      // 系別単位計算
calculateCreditsByDepartment()  // 学部別単位計算  
calculateCreditsByCategory()    // カテゴリ別単位計算
```

### 抽出関数の命名パターン
```typescript
// パターン: extract[Target]From[Source]()
extractSystemFromCategory()     // カテゴリから系名を抽出
extractYearFromCourseId()      // 科目IDから年度を抽出
```

### フィルタ関数の命名パターン
```typescript
// パターン: filter[Target]By[Condition]()
filterCourses()                // 科目のフィルタリング
filterUserCoursesByStatus()    // ステータス別履修科目フィルタ
```

## 系別機能のデータ処理パターン

### 系名抽出の実装
```typescript
export function extractSystemFromCategory(category: string): string {
  // カテゴリ名から英語部分を除去して系名のみを抽出
  const match = category.match(/^([^(]+)/);
  return match ? match[1].trim() : category;
}
```

### 系別集計の実装パターン
```typescript
export function calculateCreditsBySystem(courses: Course[], userCourses: UserCourse[]) {
  const result: Record<string, { completed: number; planned: number; courses: { completed: Course[]; planned: Course[] } }> = {};
  
  userCourses.forEach(uc => {
    const course = courses.find(c => c.id === uc.courseId);
    if (!course) return;

    const systemName = extractSystemFromCategory(course.category);
    
    if (!result[systemName]) {
      result[systemName] = { 
        completed: 0, 
        planned: 0, 
        courses: { completed: [], planned: [] }
      };
    }
    
    // ステータス別の処理...
  });
  
  return result;
}
```

## エラーハンドリングパターン

### JSONデータアクセス時の安全な処理
```typescript
// 危険：存在しないプロパティへのアクセス
const requirements = requirementsData.graduationRequirements; // undefined

// 安全：実際の構造に基づくアクセス  
const requirements = requirementsData.graduationRequirement;
```

### オプショナルプロパティの安全な処理
```typescript
// 危険：nullチェックなし
function processCourse(course: Course) {
  return course.department.toLowerCase(); // エラーの可能性
}

// 安全：適切なnullチェック
function processCourse(course: Course) {
  return course.department?.toLowerCase() || 'unknown';
}
```

### 配列操作の安全な処理
```typescript
// 危険：配列の存在チェックなし
requirements.map(req => processRequirement(req));

// 安全：存在確認付き
requirements?.map(req => processRequirement(req)) || [];
```

## ユーティリティ関数の管理

### [utils.ts](mdc:app/lib/utils.ts)での関数分類
- **データ変換**: extractSystemFromCategory, getCategoryColor
- **計算処理**: calculateCreditsBySystem, getProgressPercentage  
- **フィルタリング**: filterCourses, sortCourses
- **状態管理**: getUserCourseStatus, getStatusText

### 新しいユーティリティ関数追加時の指針
1. 機能別にコメントでセクション分け
2. 型安全性を確保（型注釈必須）
3. エラーハンドリングを適切に実装
4. JSDocコメントで用途を明記

## パフォーマンス考慮事項

### 重い処理の最適化
```typescript
// 系別集計などの計算量の多い処理
const systemCredits = useMemo(() => 
  calculateCreditsBySystem(courses, userCourses), 
  [courses, userCourses]
);
```

### 状態管理での依存配列の適切な設定
```typescript
// フィルタ処理の最適化
const filteredCourses = useMemo(() => 
  filterCourses(courses, filter), 
  [courses, filter]  // 必要な依存関係のみ
);
```

## データ整合性の維持

### 新機能追加時の整合性チェック
1. 型定義の更新（[types.ts](mdc:app/lib/types.ts)）
2. フィルタ機能の更新（SearchFilter型の拡張）
3. ユーティリティ関数の更新（[utils.ts](mdc:app/lib/utils.ts)）
4. JSONデータとの整合性確認

### データ構造変更時の影響範囲
- コンポーネントのプロップス型
- ユーティリティ関数の引数・戻り値型
- ローカルストレージのデータバージョン
- APIレスポンスの型定義

## 利用可能な系一覧
現在のシステムで管理している学問分野（系）：
- 人文科学系
- 社会科学系  
- 自然科学系
- 語学系A
- 健康とスポーツ系
- キャリアデザイン系
- 情報・メディア系
- 数理情報系
