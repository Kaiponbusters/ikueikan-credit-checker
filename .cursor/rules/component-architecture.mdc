---
description:
globs:
alwaysApply: false
---
# コンポーネント設計・アーキテクチャルール

## 機能別ディレクトリ構造

このプロジェクトでは機能別にコンポーネントを分類する構造を採用しています：

```
app/components/
├── course-search/     # 科目検索機能
├── course-list/       # 科目一覧表示機能
├── credit-summary/    # 単位集計・進捗表示機能
└── index.ts          # メインエクスポートファイル
```

### 新機能追加時のディレクトリ作成
- 新しい主要機能は独立したサブディレクトリを作成
- 各ディレクトリには必ず`index.ts`ファイルを配置してエクスポートを管理
- 機能名はkebab-case（例：`course-search`、`grade-calculator`）

## コンポーネント分割の指針

### 分割基準
- **316行を超える場合は必ず分割を検討**
- **単一責任の原則**: 1つのコンポーネントは1つの責務のみ
- **関心の分離**: UI表示、状態管理、データ処理を適切に分離

### 成功事例：CreditSummary.tsx
**分割前**: 316行のモノリシックコンポーネント
**分割後**: 
- メインコンポーネント：17行（構成のみ）
- OverallProgress.tsx：82行（総合進捗）
- CategoryProgress.tsx：45行（カテゴリ別進捗）
- SystemProgress.tsx：121行（系別進捗）
- DepartmentProgress.tsx：41行（学部別単位数）
- WarningsSection.tsx：63行（警告表示）

## インポート・エクスポート規則

### エクスポート方式
```typescript
// 各機能ディレクトリのindex.ts
export { default as ComponentName } from './ComponentName';

// メインのcomponents/index.ts
export * from './course-search';
export * from './course-list';
export * from './credit-summary';
```

### インポート方式
```typescript
// 機能単位でのインポート（推奨）
import { CourseSearch } from './components/course-search';

// 個別コンポーネントでのインポート
import { BasicSearchFields, AdvancedSearchFields } from './components/course-search';
```

## パフォーマンス最適化

### useMemoの活用
- 計算量の多い処理は必ず`useMemo`でメモ化
- 例：系別集計、フィルタ処理、ソート処理

```typescript
const systemCredits = useMemo(() => calculateCreditsBySystem(courses, userCourses), [courses, userCourses]);
```

### useCallbackの活用
- 子コンポーネントに渡すコールバック関数をメモ化
- 展開/折りたたみなどの状態変更関数

## 型安全性の確保

### 相対パスの管理
- サブディレクトリから`lib/`へのアクセスは`../../lib/`
- インポートパスの一貫性を保つ

### プロップス型定義
```typescript
interface ComponentProps {
  courses: Course[];
  userCourses: UserCourse[];
  onUpdate: (id: string, status: string) => void;
}
```

## コンポーネント命名規則

### ファイル名
- **PascalCase**: CourseSearch.tsx, OverallProgress.tsx
- **機能を明確に表現**: BasicSearchFields（基本検索）、AdvancedSearchFields（詳細検索）

### 機能別接尾辞
- **Progress**: 進捗表示系（OverallProgress、SystemProgress）
- **Fields**: フォームフィールド系（BasicSearchFields）
- **Actions**: アクション系（SearchFormActions）
- **Section**: セクション表示系（WarningsSection）

## 今後の拡張パターン

### 新機能追加フロー
1. 機能要件の定義
2. ディレクトリ構造の決定
3. コンポーネント分割の設計
4. 型定義の作成/更新
5. パフォーマンス最適化の実装
6. エクスポート構造の整備

### 推奨される新機能ディレクトリ例
- `grade-management/` - 成績管理機能
- `schedule-planning/` - 履修計画機能
- `report-generator/` - レポート生成機能
- `user-settings/` - ユーザー設定機能
